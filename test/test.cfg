# ######################## 设置配置 ###########################

[SETTINGS]

# 是否严格模式读取和生成配置， 默认 false
# !!! 注意事项: 若设置为false，则生成的随机值将写入配置文件，源配置文件将移到同目录下，且重新命名文件名称以便回朔
### false 将自动生成 部分配置 (例如: 数据库名称(db_name) 若配置不存在，则会自动生成一个随机值设置到配置中)
### true  将严格读取配置，若配置不存在则不会赋予默认值或随机值

strict = {strict}

global_cfg_path_key = {global_cfg_path_key}

# ######################## 项目配置 ###########################

[PROJECT]

# 是否测试模式
debug = {debug}

# 项目名称，仅允许英文
name = {project_name}

# 项目名称, 允许中英文
verbose_name = {project_name}

# 项目说明，允许中英文
description = {project_name}


# ####################### 服务配置 ###########################

[SERVER]

# 服务工作主目录， 主要保存各项服务的配置和日志保存
path = {server_path}

# 配置目录
config_path = {config_path}

# 站点服务目录
site_path = {site_path}

# 后台服务目录
admin_path = {server_admin_path}

# 日志目录
log_path = {server_log_path}

# ####################### 源码配置 ###########################

[SOURCE]

# 若在Docker容器内运行，则为Docker容器内部路径, 如果为相对路径则相对于配置文件(settings.cfg)所在目录的路径

# 项目软件库目录
library_path = {library_path}

# 测试模块目录
test_path = {test_path}


# ####################### 资源配置 ###########################

[RESOURCE]

# 若在Docker容器内，则为Docker容器内部路径, 如果为相对路径则相对于配置文件(settings.cfg)所在目录的路径

# 媒体文件url路径
media_url = {media_url}

# 媒体文件目录
media_path = {media_path}

# 静态文件url路径
static_url = {static_url}

# 静态文件目录
static_path = {static_path}

# 缓存目录
tmp_path = {tmp_path}

# 模板目录
template_path = {template_path}


# ####################### 前台站点配置 ###########################

[SITE]

# 若在Docker容器内运行，则为Docker容器内部路径, 如果为相对路径则相对于配置文件(settings.cfg)所在目录的路径

# 主机地址, 若在Docker容器内运行，可设置为Docker容器名称（当容器在同一个网络中）， 默认: 0.0.0.0
host = {site_host}

# 测试模式端口, 默认: 8400
debug_port = {site_debug_port}

# 发布模式端口组，由于主机资源或许有限建议不超过40个端口，若条件允许可支持无限个端口
release_ports = {site_release_port_list}

# Cookie密钥，Tornado，配置初始化之后，若该配置未设置，将初始化一个随机值
cookie_secret = {cookie_secret}

# 默认登录url路径，若用户未登录，则默认跳转该地址，可设置类似 https://domain/site/user/login 的地址
login_url = {login_url}

# 日志目录
log_path = {site_log_path}

# 备份目录
backup_path = {site_backup_path}


# ####################### 后台站点配置 ###########################

[ADMIN]

# 项目名称，仅允许英文, 用于设置Admin.settings环境
name = {admin_name}

# 主机地址, 若在Docker容器内运行，可设置为Docker容器名称（当容器在同一个网络中）， 默认: 0.0.0.0
host = {admin_host}

# 测试模式端口
debug_port = {admin_debug_port}

# 发布模式端口
release_port = {admin_release_port}

# 日志目录
log_path = {site_log_path}

# 备份目录
backup_path = {admin_backup_path}

# ####################### Nginx配置 ###########################

[NGINX]

# 若在Docker容器内运行，则为Docker容器内部路径, 如果为相对路径则相对于配置文件(settings.cfg)所在目录的路径

# nginx主目录
path = {nginx_path}

# 配置目录
config_path = {nginx_config_path}

# 日志目录
log_path = {nginx_log_path}

# ####################### 数据库配置 ###########################

[DATABASE]

# 若在Docker容器内运行，则为Docker容器内部路径, 如果为相对路径则相对于配置文件(settings.cfg)所在目录的路径

# 数据库主机地址，支持远程主机地址, 可设置 域名 或 ip
db_host = {db_host}

# 数据库端口，默认 3306
db_port = {db_port}

# 数据库名称, 命名建议少于14个长度, 若无设置则随机生成
db_name = {db_name}

# 数据库用户
db_user = {db_user}

# 数据库密码
db_password = {db_password}

# 数据库文件保存路径，通常用于sqlite数据库文件存放
db_path = {db_path}

# 数据库备份路径
backup_path = {db_backup_path}

# ####################### 模板配置 ###########################

[TEMPLATE]

# 配置模板版本，默认为远程git仓库对应的tag
settings_version = {config_version}

# 配置模板远程git仓库url地址
settings_git_url = {config_git_url}

# 项目模板版本，默认为远程git仓库对应的tag
project_version = {project_version}

# 项目模板远程git仓库url地址
project_git_url = {project_git_url}

# 站点应用模板版本，默认为远程git仓库对应的tag
site_app_version = {site_app_version}

# 站点应用模板远程git仓库url地址
site_app_git_url = {site_app_git_url}


# ####################### 日志配置 ###########################

[LOG]

# 若在Docker容器内运行，则为Docker容器内部路径, 如果为相对路径则相对于配置文件(settings.cfg)所在目录的路径

# 日志主目录
path = {log_path}


# ####################### 备份配置 ###########################

[BACKUP]

# 若在Docker容器内运行，则为Docker容器内部路径, 如果为相对路径则相对于配置文件(settings.cfg)所在目录的路径

# 备份主目录
path = {backup_path}


# ####################### 工作空间配置 ###########################

[WORKSPACE]

# 若在Docker容器内运行，则为Docker容器内部路径, 如果为相对路径则相对于配置文件(settings.cfg)所在目录的路径
# 工作空间主目录
path = {workspace_path}
